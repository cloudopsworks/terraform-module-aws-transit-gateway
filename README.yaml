name: Terraform Transit Gateway Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-transit-gateway

description: |-
  This Terraform module sets up a Transit Gateway in AWS with support for Resource Access Manager (RAM). 
  It simplifies the process of creating and managing a Transit Gateway, which allows you to connect multiple 
  VPCs and on-premises networks through a central hub. The module includes the following features:

  - **Transit Gateway Creation**: Automatically creates a Transit Gateway with customizable options.
  - **VPC Attachments**: Supports attaching multiple VPCs to the Transit Gateway.
  - **Route Tables**: Manages route tables for the Transit Gateway, allowing you to control traffic flow between VPCs.
  - **Resource Access Manager (RAM) Support**: Enables sharing of the Transit Gateway with other AWS accounts using RAM.
  - **Tagging**: Supports tagging of all resources for easy identification and management.
  - **Security**: Configures security settings to ensure secure communication between VPCs.

  This module is designed to be easy to use and highly customizable, making it suitable for a wide range of use cases.

# Introduction to the project
introduction: |-
  The AWS Transit Gateway Module is designed to simplify the implementation of hub-and-spoke network architectures in AWS. 
  It provides a centralized way to manage network connectivity between VPCs and on-premises networks through a single gateway.

  Key features:
  - Automated Transit Gateway deployment with customizable configurations
  - Support for VPC attachments and route table management
  - Built-in Resource Access Manager (RAM) integration for cross-account sharing
  - Comprehensive tagging system integration
  - DNS support and multicast capabilities
  - VPN ECMP support for enhanced routing

# How to use this project
usage: |-
  To use this module, you need to provide the following configuration:

  ```hcl
  module "transit_gateway" {
    source = "cloudopsworks/terraform-module-aws-transit-gateway"

    org = {
      organization_name = "MyOrg"
      organization_unit = "MyUnit"
      environment_name = "prod"
      environment_type = "production"
    }

    name        = "main-tgw"
    description = "Main Transit Gateway"

    # Optional configurations
    amazon_side_asn = "64512"
    enable_dns_support = true
    enable_vpn_ecmp_support = true

    # RAM sharing configuration
    share_tgw = true
    ram_principals = ["111111111111"]
  }
  ```

  For detailed variable descriptions, refer to the variables-transit-gw.tf file.

# Example usage
examples: |-
  Terragrunt configuration example:

  ```hcl
  # terragrunt.hcl
  include {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-transit-gateway.git?ref=v1.0.0"
  }

  inputs = {
    org = {
      organization_name = "MyOrg"
      organization_unit = "MyUnit"
      environment_name = get_env("ENV_NAME", "dev")
      environment_type = get_env("ENV_TYPE", "development")
    }

    name = "central-tgw"
    description = "Central Transit Gateway for network connectivity"

    enable_dns_support = true
    enable_vpn_ecmp_support = true

    transit_gateway_cidr_blocks = ["10.0.0.0/24"]

    share_tgw = true
    ram_principals = ["222222222222"]

    extra_tags = {
      Project = "NetworkInfra"
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Add the module to your Terraform configuration:
     ```hcl
     module "transit_gateway" {
       source = "cloudopsworks/terraform-module-aws-transit-gateway"
       version = "1.0.0"

       org = {
         organization_name = "MyOrg"
         organization_unit = "MyUnit"
         environment_name = "dev"
         environment_type = "development"
       }

       name = "quick-start-tgw"
     }
     ```

  2. Initialize Terraform:
     ```bash
     terraform init
     ```

  3. Review the plan:
     ```bash
     terraform plan
     ```

  4. Apply the configuration:
     ```bash
     terraform apply
     ```

  5. The Transit Gateway will be created with default settings. Customize the configuration by adding more variables as needed.

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"